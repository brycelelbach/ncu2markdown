"ID","Process ID","Process Name","Host Name","Kernel Name","Context","Stream","Block Size","Grid Size","Device","CC","Section Name","Metric Name","Metric Unit","Metric Value","Rule Name","Rule Type","Rule Description","Estimated Speedup Type","Estimated Speedup"
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Frequency","hz","4,963,609,951.19",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","GPU Speed Of Light Throughput","SM Frequency","hz","584,998,877.44",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","12,319,469",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","GPU Speed Of Light Throughput","Memory Throughput","%","61.84",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","GPU Speed Of Light Throughput","DRAM Throughput","%","61.84",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","GPU Speed Of Light Throughput","Duration","ns","21,058,944",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","18.29",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","GPU Speed Of Light Throughput","L2 Cache Throughput","%","8.38",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","GPU Speed Of Light Throughput","SM Active Cycles","cycle","12,217,197.85",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","1.30",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","SpeedOfLight","","","","SOLBottleneck","OPT","Memory is more heavily utilized than Compute: Look at the Memory Workload Analysis section to identify the DRAM bottleneck. Check memory replay (coalescing) metrics to make sure you're efficiently utilizing the bytes transferred. Also consider whether it is possible to do more work per memory access (kernel fusion) or whether there are values you can (re)compute.","",""
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","PM Sampling","Maximum Buffer Size","byte","3,538,944",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","PM Sampling","Dropped Samples","sample","0",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","PM Sampling","Maximum Sampling Interval","cycle","40,000",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","PM Sampling","# Pass Groups","","1",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.03",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.03",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Compute Workload Analysis","Issue Slots Busy","%","0.82",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.03",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Compute Workload Analysis","SM Busy","%","1.14",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","98.86"
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Memory Workload Analysis","Memory Throughput","byte/s","196,456,177,859.63",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Memory Workload Analysis","Mem Busy","%","6.92",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Memory Workload Analysis","Max Bandwidth","%","61.84",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Memory Workload Analysis","L1/TEX Hit Rate","%","0.46",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Memory Workload Analysis","L2 Hit Rate","%","4.58",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Memory Workload Analysis","Mem Pipes Busy","%","1.30",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","MemoryWorkloadAnalysis_Chart","","","","MemoryL2Compression","WRN","The optional metric lts__average_gcomp_input_sector_success_rate.pct could not be found. Collecting it as an additional metric could enable the rule to provide more guidance.","",""
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from DRAM might not be optimal. On average, only 8.0 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 97.7% of sectors missed in L2. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","45.14"
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to DRAM might not be optimal. On average, only 8.0 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 93.0% of sectors missed in L2. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","42.96"
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Scheduler Statistics","One or More Eligible","%","0.82",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Scheduler Statistics","Issued Warp Per Scheduler","","0.01",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Scheduler Statistics","No Eligible","%","99.18",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Scheduler Statistics","Active Warps Per Scheduler","warp","7.69",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.01",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 121.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of 7.69 active warps per scheduler, but only an average of 0.01 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","38.16"
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","933.13",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","933.68",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Warp State Statistics","Avg. Active Threads Per Warp","","32",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","31.95",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 491.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 52.7% of the total average of 933.1 cycles between issuing two instructions.","global","38.16"
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 437.2 cycles being stalled waiting for the L1 instruction queue for local and global (LG) memory operations to be not full. Typically, this stall occurs only when executing local or global memory instructions extremely frequently. Avoid redundant global memory accesses. Try to avoid using thread-local memory by checking if dynamically indexed arrays are declared in local scope, of if the kernel has excessive register pressure causing by spills. If applicable, consider combining multiple lower-width memory operations into fewer wider memory operations and try interleaving memory operations and math instructions. This stall type represents about 46.9% of the total average of 933.1 cycles between issuing two instructions.","global","38.16"
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","100,659.20",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Instruction Statistics","Executed Instructions","inst","16,105,472",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","100,718.20",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Instruction Statistics","Issued Instructions","inst","16,114,912",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Launch Statistics","Block Size","","256",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Launch Statistics","Grid Size","","1,024",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Launch Statistics","Registers Per Thread","register/thread","32",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Launch Statistics","Shared Memory Configuration Size","byte","32,768",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Launch Statistics","Driver Shared Memory Per Block","byte/block","0",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Launch Statistics","# SMs","SM","40",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Launch Statistics","Threads","thread","262,144",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Launch Statistics","Uses Green Context","","0",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Launch Statistics","Waves Per SM","","6.40",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Occupancy","Block Limit SM","block","16",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Occupancy","Block Limit Registers","block","8",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Occupancy","Block Limit Shared Mem","block","16",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Occupancy","Block Limit Warps","block","4",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Occupancy","Theoretical Active Warps per SM","warp","32",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Occupancy","Theoretical Occupancy","%","100",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Occupancy","Achieved Occupancy","%","96.26",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Occupancy","Achieved Active Warps Per SM","warp","30.80",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","64,643,119.50",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","836,227,072",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","12,217,197.85",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","491,573,176",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","17,799,596.66",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","576,171,648",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","12,217,197.85",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","491,573,176",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","12,217,802.59",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","1,966,292,704",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Source Counters","Branch Instructions Ratio","%","0.01",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Source Counters","Branch Instructions","inst","155,648",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Source Counters","Branch Efficiency","%","100",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","Source Counters","Avg. Divergent Branches","","0",
"0","6153","python3.11","127.0.0.1","copy_blocked[v1,cw51cXTLSUwv1sDUaKthrqNgqqmjgOR3W3CwAkMXLaJtQYkOIgxJU0gCqOkEJoHkbttqdVhoqlspQGNFHSgJ5BnXagIA](Array<long long, 1, C, mutable, aligned>, Array<long long, 1, C, mutable, aligned>, long long)","1","7","(256, 1, 1)","(1024, 1, 1)","0","7.5","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 25165824 excessive sectors (75% of the total 33554432 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","74.14"
